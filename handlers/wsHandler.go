package handlers

import (
	"net/http"
	"sync"
	"time"

	"breez/models"

	"github.com/gorilla/websocket"
)

var clients = make(map[*websocket.Conn]string) // WebSocket -> Chat ID
var broadcast = make(chan models.Message)
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

var mu sync.Mutex

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket
func HandleConnections(w http.ResponseWriter, r *http.Request) {
	if r.Header.Get("Upgrade") != "websocket" {
		http.Error(w, "Expected WebSocket handshake", http.StatusUpgradeRequired)
		return
	}

	ws, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:", err)
		return
	}
	defer ws.Close()

	chatID := r.URL.Query().Get("chat_id")
	if chatID == "" {
		log.Println("‚ö†Ô∏è –û—à–∏–±–∫–∞: chat_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω")
		return
	}
	cookie, err := r.Cookie("user_id")
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id:", err)
		return
	}
	userID := cookie.Value
	// –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
	var role string
	if err := db.Raw("SELECT role FROM users WHERE id = ?", userID).Scan(&role).Error; err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏:", err)
		return
	}

	mu.Lock()
	clients[ws] = chatID
	mu.Unlock()

	log.Println("üü¢ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É:", chatID)

	var messages []models.Message
	if err := db.Where("chat_id = ?", chatID).Order("created_at ASC").Find(&messages).Error; err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:", err)
	} else {
		for _, msg := range messages {
			msgFormatted := map[string]string{
				"time":    msg.Timestamp, // –ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã:–°–µ–∫—É–Ω–¥—ã
				"sender":  msg.Sender,
				"content": msg.Content,
			}
			log.Println("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WebSocket:", msgFormatted)
			err := ws.WriteJSON(msgFormatted)
			if err != nil {
				log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", err)
			}
		}
	}

	for {
		var msg models.Message
		err := ws.ReadJSON(&msg)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è WebSocket:", err)
			mu.Lock()
			delete(clients, ws)
			mu.Unlock()
			break
		}
		if role == "admin" {
			msg.Sender = "–ê–¥–º–∏–Ω"
		} else {
			msg.Sender = "–ö–ª–∏–µ–Ω—Ç"
		}

		// üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
		msg.ChatID = chatID
		msg.Timestamp = time.Now().Format("15:04:05")

		if err := db.Create(&msg).Error; err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î:", err)
		}

		log.Println("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg.Content)
		broadcast <- msg
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
func HandleMessages() {
	for {
		msg := <-broadcast

		// ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		msgFormatted := map[string]string{
			"time":    msg.Timestamp,
			"sender":  msg.Sender,
			"content": msg.Content,
		}
		log.Println("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", msg)
		mu.Lock()
		for client, chatID := range clients {
			if chatID == msg.ChatID {
				err := client.WriteJSON(msgFormatted)
				if err != nil {
					log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
					client.Close()
					delete(clients, client)
				}
			}
		}
		log.Println("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WebSocket:", msgFormatted)
		mu.Unlock()
	}
}
